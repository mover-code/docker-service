version: '3.5'
# 网络配置
networks:
  backend:
    driver: ${NETWORKS_DRIVER}

# 服务容器配置
services:
  golang:
    # 自定义容器名称
    container_name: service
    build:
      context: ./golang # 指定构建使用的 Dockerfile 文件
    environment:
      - TZ=${TZ}
    volumes:
      # 设置挂载目录
      - /home/pro:/usr/src/code # 引用 .env 配置中 CODE_PATH_HOST 变量，将宿主机上代码存放的目录挂载到容器中 /usr/src/code 目录
    ports:
      # 设置端口映射
      - "8000:8000"
      - "8001:8001"
    stdin_open: true # 打开标准输入，可以接受外部输入
    tty: true
    networks:
      - backend
    restart: always # 指定容器退出后的重启策略为始终重启

  # etcd:
  #   container_name: etcd
  #   # 自定义容器名称
  #   build:
  #     context: ./etcd # 指定构建使用的 Dockerfile 文件
  #   environment:
  #     - TZ=${TZ}
  #     - ALLOW_NONE_AUTHENTICATION=yes
  #   ports:
  #     # 设置端口映射
  #     - "${ETCD_PORT}:2379"
  #   networks:
  #     - backend
  #   restart: always

  #zookeeper是kafka的依赖
  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    environment:
      # 时区上海
      - TZ=${TZ}
    restart: always
    ports:
      - 2181:2181
    networks:
      - backend

  kafka:
    build:
      context: ./kafka
    container_name: kafka
    ports:
      - "${KAFKA_PORT}:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      TZ: ${TZ}
    # restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - backend
    depends_on:
      - zookeeper

  #搜集kafka业务日志、存储prometheus监控数据
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.13.4
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - TZ=${TZ}
    volumes:
      - ${DATA_PATH_HOST}/elasticsearch/data:/usr/share/elasticsearch/data
    restart: always
    ports:
      - 9200:9200
      - 9300:9300
    networks:
      - backend

  # 查看elasticsearch数据
  kibana:
    image: docker.elastic.co/kibana/kibana:7.13.4
    container_name: kibana
    environment:
      - elasticsearch.hosts=http://elasticsearch:9200
      - TZ=${TZ}
    restart: always
    networks:
      - backend
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    # #消费kafka中filebeat收集的数据输出到es

  go-stash:
    image: kevinwan/go-stash:latest
    container_name: go-stash
    environment:
      # 时区上海
      TZ: ${TZ}
    user: root
    restart: always
    volumes:
      - ./goStash/:/app/etc
    networks:
      - backend
    depends_on:
      - elasticsearch
      - kafka
    # #收集业务数据
  filebeat:
    image: elastic/filebeat:7.13.4
    container_name: filebeat
    environment:
      # 时区上海
      - TZ=${TZ}
    user: root
    restart: always
    volumes:
      - ./filebeat/filebeat.yaml:/usr/share/filebeat/filebeat.yml
      - ${LOG_PATH_HOST}:/var/lib/docker/containers
    networks:
      - backend
    depends_on:
      - kafka

  jaeger:
    container_name: jaeger
    build:
      context: ./jaeger
    environment:
      - TZ=${TZ}
      - SPAN_STORAGE_TYPE=elasticsearch
      - ES_SERVER_URLS=http://elasticsearch:9200
      - LOG_LEVEL=debug
    ports:
      - "${JAEGER_PORT}:16686" # 设置容器16686端口映射指定宿主机端口，用于宿主机访问可视化web
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "14268:14268"
      - "9411:9411"
    networks:
      - backend
    restart: always

  prometheus:
    container_name: prome
    build:
      context: ./prometheus
    environment:
      - TZ=${TZ}
    volumes:
      - ./prometheus/prometheus.yaml:/opt/bitnami/prometheus/conf/prometheus.yml # 将 prometheus 配置文件挂载到容器里
    ports:
      - "${PROMETHEUS_PORT}:9090" # 设置容器9090端口映射指定宿主机端口，用于宿主机访问可视化web
    networks:
      - backend
    restart: always

  grafana:
    container_name: grafana
    build:
      context: ./grafana
    environment:
      - TZ=${TZ}
    ports:
      - "${GRAFANA_PORT}:3000" # 设置容器3000端口映射指定宿主机端口，用于宿主机访问可视化web
    networks:
      - backend
    restart: always
  # mysql:
  #   container_name: mysql
  #   build:
  #     context: ./mysql
  #   environment:
  #     - TZ=${TZ}
  #     - MYSQL_USER=${MYSQL_USERNAME} # 设置 Mysql 用户名称
  #     - MYSQL_PASSWORD=${MYSQL_PASSWORD} # 设置 Mysql 用户密码
  #     - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD} # 设置 Mysql root 用户密码
  #   volumes:
  #     - ${DATA_PATH_HOST}/mysql:/var/lib/mysql # 引用 .env 配置中 DATA_PATH_HOST 变量，将宿主机上存放 Mysql 数据的目录挂载到容器中 /var/lib/mysql 目录
  #   ports:
  #     - "${MYSQL_PORT}:3306" # 设置容器3306端口映射指定宿主机端口
  #   networks:
  #     - backend
  #   restart: always

  # redis:
  #   container_name: redis
  #   build:
  #     context: ./redis
  #   environment:
  #     - TZ=${TZ}
  #   volumes:
  #     - ${DATA_PATH_HOST}/redis:/Users/ant/desk/pro/golang/data # 引用 .env 配置中 DATA_PATH_HOST 变量，将宿主机上存放 Redis 数据的目录挂载到容器中 /data 目录
  #   ports:
  #     - "${REDIS_PORT}:6379" # 设置容器6379端口映射指定宿主机端口
  #   networks:
  #     - backend
  #   restart: always
  # mysql-manage:
  #   container_name: mysqlCli
  #   build:
  #     context: ./mysql-manage
  #   environment:
  #     - TZ=${TZ}
  #     - PMA_ARBITRARY=1
  #     - MYSQL_USER=${MYSQL_MANAGE_USERNAME} # 设置连接的 Mysql 服务用户名称
  #     - MYSQL_PASSWORD=${MYSQL_MANAGE_PASSWORD} # 设置连接的 Mysql 服务用户密码
  #     - MYSQL_ROOT_PASSWORD=${MYSQL_MANAGE_ROOT_PASSWORD} # 设置连接的 Mysql 服务 root 用户密码
  #     - PMA_HOST=${MYSQL_MANAGE_CONNECT_HOST} # 设置连接的 Mysql 服务 host，可以是 Mysql 服务容器的名称，也可以是 Mysql 服务容器的 ip 地址
  #     - PMA_PORT=${MYSQL_MANAGE_CONNECT_PORT} # 设置连接的 Mysql 服务端口号
  #   ports:
  #     - "${MYSQL_MANAGE_PORT}:80" # 设置容器80端口映射指定宿主机端口，用于宿主机访问可视化web
  #   # depends_on:
  #   #   # 依赖容器
  #   #   - mysql # 在 Mysql 服务容器启动后启动
  #   networks:
  #     - backend
  #   restart: always

  # redis-manage:
  #   container_name: redisCli
  #   build:
  #     context: ./redis-manage
  #   environment:
  #     - TZ=${TZ}
  #     - ADMIN_USER=${REDIS_MANAGE_USERNAME} # 设置 Redis 可视化管理的用户名称
  #     - ADMIN_PASS=${REDIS_MANAGE_PASSWORD} # 设置 Redis 可视化管理的用户密码
  #     - REDIS_1_HOST=${REDIS_MANAGE_CONNECT_HOST} # 设置连接的 Redis 服务 host，可以是 Redis 服务容器的名称，也可以是 Redis 服务容器的 ip 地址
  #     - REDIS_1_PORT=${REDIS_MANAGE_CONNECT_PORT} # 设置连接的 Redis 服务端口号
  #   ports:
  #     - "${REDIS_MANAGE_PORT}:80" # 设置容器80端口映射指定宿主机端口，用于宿主机访问可视化web
  #   # depends_on:
  #   #   # 依赖容器
  #   #   - redis # 在 Redis 服务容器启动后启动
  #   networks:
  #     - backend
  #   restart: always




  # dtm:
  #   container_name: dtm
  #   build:
  #     context: ./dtm
  #   environment:
  #     - TZ=${TZ}
  #   entrypoint:
  #     - "/app/dtm/dtm"
  #     - "-c=/app/dtm/configs/config.yaml"
  #   volumes:
  #     - ./dtm/config.yaml:/app/dtm/configs/config.yaml # 将 dtm 配置文件挂载到容器里
  #   ports:
  #     - "${DTM_HTTP_PORT}:36789"
  #     - "${DTM_GRPC_PORT}:36790"
  #   networks:
  #     - backend
  # restart: always
